version: "3"

tasks:
  default:
    desc: Run development server, watching code files for changes.
    cmds:
      - task --parallel fmt-lint backend frontend --watch

  fmt-lint:
    desc: "Run formatters and linters"
    cmds:
      - task: fmt
      - task: lint

  backend:
    desc: Run "doctree serve" backend
    cmds:
      - .bin/doctree serve
    env:
      ELM_DEBUG_SERVER: "http://localhost:1234/"
    deps:
      - build-go-debug

  frontend:
    desc: Run Elm frontend dev server
    dir: frontend
    cmds:
      - npx elm-spa server | grep -v 'Ready at'

  build:
    desc: Build Go + Elm code in release mode
    cmds:
      - task: build-go-release
    deps:
      - task: build-elm-release

  build-elm-debug:
    desc: Build Elm frontend code (debug mode)
    dir: frontend
    cmds:
      - npx elm-spa gen
      - mkdir -p public/dist/
      - npx elm make --debug .elm-spa/defaults/Main.elm --output ./public/dist/elm.js
    sources:
      - ./frontend/src/**/*.elm
    generates:
      - .elm-spa/**/*
      - ./frontend/public/dist/elm.js

  build-elm-release:
    desc: Build Elm frontend code (release mode, minified, etc.)
    dir: frontend
    cmds:
      - npx elm-spa gen
      - mkdir -p public/dist/
      - npx elm make .elm-spa/defaults/Main.elm --optimize --output ./public/dist/elm.js
    sources:
      - ./frontend/src/**/*.elm
    generates:
      - .elm-spa/**/*
      - ./frontend/public/dist/elm.js

  build-go-debug:
    desc: Build .bin/doctree (debug)
    cmds:
      - mkdir -p .bin
      - go build -a -ldflags "-w" -o .bin/doctree ./cmd/doctree
    sources:
      - ./**/*.go
      - libs/sinter/**/*.zig
    generates:
      - .bin/doctree
    deps:
      - task: build-zig-debug

  build-go-release:
    desc: Build .bin/doctree (release)
    cmds:
      - mkdir -p .bin
      - go build -a -o .bin/doctree ./cmd/doctree
    sources:
      - ./**/*.go
      - ./frontend/public/**
      - libs/sinter/**/*.zig
    generates:
      - .bin/doctree
    deps:
      - task: build-zig-release

  build-zig-debug:
    desc: Build Zig code in debug mode
    cmds:
      - cd libs/sinter && zig build
    sources:
      - libs/sinter/**/*.zig

  build-zig-release:
    desc: Build Zig code in release mode
    cmds:
      - cd libs/sinter && zig build -Drelease-fast=true
    sources:
      - libs/sinter/**/*.zig

  test:
    desc: Run all tests
    cmds:
      - go test ./...

  test-race:
    desc: Run all tests (checking for race conditions, slow)
    cmds:
      - go test -race ./...

  generate:
    desc: Produce generated code
    cmds:
      - go generate ./...
    sources:
      - ./**/*.go

  lint:
    desc: Lint code
    cmds:
      # Using --go=1.17 for now because of https://github.com/golangci/golangci-lint/issues/2649
      - .bin/golangci-lint run --go=1.17 ./...
    sources:
      - ./**/*.go
    deps:
      - build-tools

  fmt:
    desc: Format code
    cmds:
      - .bin/gofumpt -l -w .
    sources:
      - ./**/*.go
    deps:
      - build-tools

  setup:
    desc: Install dependencies, pull submodules
    cmds:
      - git submodule update --init --recursive
      - rm libs/sinter/bindings/sinter-go/go.mod
      - cd frontend && npm install

  build-tools:
    desc: Build tool dependencies (golangci-lint, etc.)
    cmds:
      - GOBIN="$(pwd)/.bin" go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.45.2
      - GOBIN="$(pwd)/.bin" go install mvdan.cc/gofumpt@latest
    status:
      - test -f .bin/golangci-lint
      - test -f .bin/gofumpt

  build-image:
    desc: Build sourcegraph/doctree:dev Docker image
    cmds:
      - docker build --no-cache -t sourcegraph/doctree:dev .
    deps:
      - task: build

  run-image:
    desc: Run sourcegraph/doctree:dev Docker image
    cmds:
      - docker run -it sourcegraph/doctree:dev

  cross-compile:
    desc: "Cross compile binaries using Zig (requires Go 1.18+, Zig 0.10+, macOS Monterey 12+ host machine)"
    cmds:
      - task: cc-x86_64-linux
      - task: cc-x86_64-macos
      - task: cc-aarch64-macos
      - task: cc-x86_64-windows

  cc-x86_64-linux:
    desc: "Cross compile to x86_64-linux using Zig"
    cmds:
      - go build -o out/doctree-x86_64-linux ./cmd/doctree/
    env:
      CGO_ENABLED: "1"
      GOOS: "linux"
      GOARCH: "amd64"
      CC: "zig cc -target x86_64-linux-gnu"
      CXX: "zig c++ -target x86_64-linux-gnu"
    sources:
      - ./**/*.go
      - ./frontend/public/**
    generates:
      - out/doctree-x86_64-macos
    deps:
      - task: build-elm-release

  cc-x86_64-macos:
    desc: "Cross compile to x86_64-macos using Zig (REQUIRES XCODE, ONLY WORKS ON MACOS)"
    cmds:
      - go build -o out/doctree-x86_64-macos -buildmode=pie -ldflags "-s -w -linkmode external" ./cmd/doctree/
    env:
      CGO_ENABLED: "1"
      GOOS: "darwin"
      GOARCH: "amd64"
      CC: "zig cc -target x86_64-macos  -F /System/Library/Frameworks --sysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk"
      CXX: "zig c++ -target x86_64-macos  -F /System/Library/Frameworks --sysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk"
    sources:
      - ./**/*.go
      - ./frontend/public/**
    generates:
      - out/doctree-x86_64-macos
    deps:
      - task: build-elm-release

  cc-aarch64-macos:
    desc: "Cross compile to aarch64-macos using Zig (REQUIRES XCODE, ONLY WORKS ON MACOS 12+)"
    cmds:
      - go build -o out/doctree-aarch64-macos -buildmode=pie -ldflags "-s -w -linkmode external" ./cmd/doctree/
    env:
      CGO_ENABLED: "1"
      GOOS: "darwin"
      GOARCH: "arm64"
      CC: "zig cc -target aarch64-macos -F /System/Library/Frameworks --sysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk"
      CXX: "zig c++ -target aarch64-macos -F /System/Library/Frameworks --sysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk"
    sources:
      - ./**/*.go
      - ./frontend/public/**
    generates:
      - out/doctree-aarch64-macos
    deps:
      - task: build-elm-release

  cc-x86_64-windows:
    desc: "Cross compile to x86_64-windows using Zig"
    cmds:
      - go build -o out/doctree-x86_64-windows.exe ./cmd/doctree/
    env:
      CGO_ENABLED: "1"
      GOOS: "windows"
      GOARCH: "amd64"
      CC: "zig cc -Wno-dll-attribute-on-redeclaration -target x86_64-windows-gnu"
      CXX: "zig c++ -target x86_64-windows-gnu"
    sources:
      - ./**/*.go
      - ./frontend/public/**
    generates:
      - out/doctree-x86_64-windows.exe
    deps:
      - task: build-elm-release
